(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{117:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return s})),t.d(a,"metadata",(function(){return r})),t.d(a,"toc",(function(){return l})),t.d(a,"default",(function(){return m}));var n=t(3),o=t(7),d=(t(0),t(148)),i=(t(166),t(154)),s={id:"basic",title:"Basic Edit"},r={unversionedId:"edit/basic",id:"edit/basic",isDocsHomePage:!1,title:"Basic Edit",description:"Usage",source:"@site/demos/edit/basic.mdx",slug:"/edit/basic",permalink:"/demos/edit/basic",version:"current",sidebar:"sidebar",previous:{title:"Basic Details Panel",permalink:"/demos/details-panel/basic"},next:{title:"Basic Export",permalink:"/demos/export/basic"}},l=[{value:"Usage",id:"usage",children:[]},{value:"Live Demo",id:"live-demo",children:[]}],c={toc:l};function m(e){var a=e.components,t=Object(o.a)(e,["components"]);return Object(d.b)("wrapper",Object(n.a)({},c,t,{components:a,mdxType:"MDXLayout"}),Object(d.b)("h2",{id:"usage"},"Usage"),Object(d.b)("pre",null,Object(d.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),'import MaterialTable from "@material-table/core";\n\nconst [data, setData] = React.useState(EDITABLE_DATA);\n\n// Note: You may have different ways to handle build edit, this is just an example, and depending on the data property\nfunction getNewDataBulkEdit(changes, copyData) {\n  const keys = Object.keys(changes); //// key matches the column data id\n  for (let i = 0; i < keys.length; i++) {\n    if (changes[keys[i]] && changes[keys[i]].newData) {\n      // Find the data item with the same key in copyData[]\n      let targetData = copyData.find((el) => el.id === keys[i]);\n      if (targetData) {\n        let newTargetDataIndex = copyData.indexOf(targetData);\n        copyData[newTargetDataIndex] = changes[keys[i]].newData;\n      }\n    }\n  }\n  return copyData;\n}\n\n<MaterialTable\n  icons={tableIcons}\n  columns={columns}\n  data={data}\n  // Reference: https://material-table.com/#/docs/features/editable\n  editable={{\n    onBulkUpdate: (changes) => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          let copyData = [...data];\n          setData(getNewDataBulkEdit(changes, copyData));\n          resolve();\n        }, 1000);\n      });\n    },\n    onRowAddCancelled: (rowData) => console.log("Row adding cancelled"),\n    onRowUpdateCancelled: (rowData) => console.log("Row editing cancelled"),\n    onRowAdd: (newData) => {\n      // Note: You may have different ways to handle add row data, this is just an example, and depending on the data property\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          newData.id = "uuid-" + Math.random() * 10000000;\n          setData([...data, newData]);\n          resolve();\n        }, 1000);\n      });\n    },\n    onRowUpdate: (newData, oldData) => {\n      // Note: You may have different ways to handle update row data, this is just an example, and depending on the data property\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataCopy = [...data];\n          // In dataUpdate, find target\n          dataCopy[oldData.tableData.id] = newData;\n          setData(dataCopy);\n          resolve();\n        }, 1000);\n      });\n    },\n    onRowDelete: (oldData) => {\n      // Note: You may have different ways to handle delete row data, this is just an example, and depending on the data property\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataCopy = [...data];\n          dataCopy.splice(oldData.tableData.id, 1);\n          setData(dataCopy);\n          resolve();\n        }, 1000);\n      });\n    },\n  }}\n/>;\n')),Object(d.b)("h2",{id:"live-demo"},"Live Demo"),Object(d.b)(i.a,{mdxType:"InfoBannerAboutGlobalVarsInDemos"}),Object(d.b)("pre",null,Object(d.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'// Helper function\nfunction getNewDataBulkEdit(changes, copyData) {\n  // key matches the column data id\n  const keys = Object.keys(changes);\n  for (let i = 0; i < keys.length; i++) {\n    if (changes[keys[i]] && changes[keys[i]].newData) {\n      // Find the data item with the same key in copyData[]\n      let targetData = copyData.find((el) => el.id === keys[i]);\n      if (targetData) {\n        let newTargetDataIndex = copyData.indexOf(targetData);\n        copyData[newTargetDataIndex] = changes[keys[i]].newData;\n      }\n    }\n  }\n  return copyData;\n}\n\n// Component\nfunction BasicEditPanelDemo() {\n  const [data, setData] = useState(EDITABLE_DATA);\n\n  return (\n    <MaterialTable\n      data={data}\n      columns={EDITABLE_COLUMNS}\n      icons={TABLE_ICONS}\n      editable={{\n        onBulkUpdate: (changes) =>\n          new Promise((resolve, reject) => {\n            setTimeout(() => {\n              let copyData = [...data];\n              setData(getNewDataBulkEdit(changes, copyData));\n              resolve();\n            }, 1000);\n          }),\n        onRowAddCancelled: (rowData) => console.log("Row adding cancelled"),\n        onRowUpdateCancelled: (rowData) => console.log("Row editing cancelled"),\n        onRowAdd: (newData) => {\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              newData.id = "uuid-" + Math.random() * 10000000;\n              setData([...data, newData]);\n              resolve();\n            }, 1000);\n          });\n        },\n        onRowUpdate: (newData, oldData) => {\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataCopy = [...data];\n              // In dataUpdate, find target\n              dataCopy[oldData.tableData.id] = newData;\n              setData(dataCopy);\n              resolve();\n            }, 1000);\n          });\n        },\n        onRowDelete: (oldData) => {\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataCopy = [...data];\n              dataCopy.splice(oldData.tableData.id, 1);\n              setData(dataCopy);\n              resolve();\n            }, 1000);\n          });\n        },\n      }}\n    />\n  );\n}\n')))}m.isMDXComponent=!0},154:function(e,a,t){"use strict";t.d(a,"a",(function(){return i}));var n=t(0),o=t.n(n),d=(t(22),function(e){var a=e.type,t=e.children,n=a;return"tip"===a&&(n="success"),"note"===a&&(n="secondary"),o.a.createElement("div",{className:"admonition admonition-"+a+" alert alert--"+n},o.a.createElement("div",{className:"admonition-heading"},o.a.createElement("h5",null,o.a.createElement("span",{className:"admonition-icon"},o.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},o.a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),a.toLowerCase())),o.a.createElement("div",{className:"admonition-content"},o.a.createElement("p",null,t)))}),i=function(){return o.a.createElement(d,{type:"note"},"See ",o.a.createElement("a",{href:"/demos/#demo-environment"},o.a.createElement("b",null,o.a.createElement("i",null,"here")))," for more on the ",o.a.createElement("code",null,"GLOBAL_VARS")," we use in our demos")}}}]);