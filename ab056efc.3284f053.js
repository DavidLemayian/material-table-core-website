(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{117:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return s})),t.d(a,"metadata",(function(){return l})),t.d(a,"toc",(function(){return c})),t.d(a,"default",(function(){return m}));var n=t(3),d=t(7),o=(t(0),t(148)),i=(t(166),t(154)),s={id:"basic",title:"Basic Edit"},l={unversionedId:"edit/basic",id:"edit/basic",isDocsHomePage:!1,title:"Basic Edit",description:"Usage",source:"@site/demos/edit/basic.mdx",slug:"/edit/basic",permalink:"/demos/edit/basic",version:"current",sidebar:"sidebar",previous:{title:"Basic Details Panel",permalink:"/demos/details-panel/basic"},next:{title:"Basic Export",permalink:"/demos/export/basic"}},c=[{value:"Usage",id:"usage",children:[]},{value:"Live Demo",id:"live-demo",children:[]}],r={toc:c};function m(e){var a=e.components,t=Object(d.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},r,t,{components:a,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"import MaterialTable from '@material-table/core';\n\nconst [data, setData] = React.useState(EDITABLE_DATA);\n\n// Note: You may have different ways to handle build edit, this is just an example, and depending on the data property\nfunction getNewDataBulkEdit(changes, copyData) {\n  const keys = Object.keys(changes); //// key matches the column data id\n  for (let i = 0; i < keys.length; i++) {\n    if ( changes[keys[i]] && changes[keys[i]].newData ) {\n      // Find the data item with the same key in copyData[]\n      let targetData = copyData.find(el => el.id === keys[i]);\n      if (targetData) {\n        let newTargetDataIndex = copyData.indexOf(targetData);\n        copyData[newTargetDataIndex] = changes[keys[i]].newData;\n      }\n    }\n  }\n  return copyData;\n}\n\n<MaterialTable\n  icons={tableIcons}\n  columns={columns} \n  data={data}\n  // Reference: https://material-table.com/#/docs/features/editable\n  editable={{\n    onBulkUpdate: changes => \n    new Promise((resolve, reject) => {\n        setTimeout(() => {\n            let copyData = [...data];\n            setData(getNewDataBulkEdit(changes, copyData));\n            resolve();\n        }, 1000);\n    }),\n    onRowAddCancelled: rowData => console.log('Row adding cancelled'),\n    onRowUpdateCancelled: rowData => console.log('Row editing cancelled'),\n    onRowAdd: newData =>\n    // Note: You may have different ways to handle add row data, this is just an example, and depending on the data property\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          newData.id = \"uuid-\" + Math.random()*10000000;\n          setData([...data, newData]);\n\n          resolve();\n        }, 1000);\n      }),\n    onRowUpdate: (newData, oldData) =>\n    // Note: You may have different ways to handle update row data, this is just an example, and depending on the data property\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataUpdate = [...data];\n          // In dataUpdate, find target\n          const target = dataUpdate.find(el => el.id === oldData.tableData.id);\n          const index = dataUpdate.indexOf(target);\n          dataUpdate[index] = newData;\n          setData([...dataUpdate]);\n        \n          resolve();\n        }, 1000);\n      }),\n    onRowDelete: oldData =>\n    // Note: You may have different ways to handle delete row data, this is just an example, and depending on the data property\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataDelete = [...data];\n          const target = dataDelete.find(el => el.id === oldData.tableData.id);\n          const index = dataDelete.indexOf(target);\n          dataDelete.splice(index, 1);\n          setData([...dataDelete]);\n\n          resolve();\n        }, 1000);\n      })\n  }}\n/>\n")),Object(o.b)("h2",{id:"live-demo"},"Live Demo"),Object(o.b)(i.a,{mdxType:"InfoBannerAboutGlobalVarsInDemos"}),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),"\nfunction BasicEditPanelDemo() {\n\n  const [data, setData] = useState(EDITABLE_DATA);\n\n  function getNewDataBulkEdit(changes, copyData) {\n    const keys = Object.keys(changes); //// key matches the column data id\n\n    for (let i = 0; i < keys.length; i++) {\n\n      if ( changes[keys[i]] && changes[keys[i]].newData ) {\n        // Find the data item with the same key in copyData[]\n        let targetData = copyData.find(el => el.id === keys[i]);\n\n        if (targetData) {\n          let newTargetDataIndex = copyData.indexOf(targetData);\n          copyData[newTargetDataIndex] = changes[keys[i]].newData;\n        }\n\n      }\n    }\n\n    return copyData;\n  }\n\n  return (\n    <MaterialTable\n      data={data} \n      columns={EDITABLE_COLUMNS} \n      icons={TABLE_ICONS}\n      editable={{\n        onBulkUpdate: changes => \n        new Promise((resolve, reject) => {\n          setTimeout(() => {\n              let copyData = [...data];\n              setData(getNewDataBulkEdit(changes, copyData));\n              resolve();\n          }, 500);\n        }),\n        onRowAddCancelled: rowData => console.log('Row adding cancelled'),\n        onRowUpdateCancelled: rowData => console.log('Row editing cancelled'),\n        onRowAdd: newData =>\n          new Promise((resolve, reject) => {\n            setTimeout(() => {\n                newData.id = \"uuid-\" + Math.random() * 10000000000;\n                setData([...data, newData]);\n                resolve();\n            }, 500);\n          }),\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve, reject) => {\n            setTimeout(() => {\n                const dataUpdate = [...data];\n                // In dataUpdate, find target\n                const target = dataUpdate.find(el => el.id === oldData.tableData.id);\n                const index = dataUpdate.indexOf(target);\n                dataUpdate[index] = newData;\n                setData([...dataUpdate]);\n                resolve();\n            }, 500);\n          }),\n        onRowDelete: oldData =>\n          new Promise((resolve, reject) => {\n            setTimeout(() => {\n                const dataDelete = [...data];\n                const target = dataDelete.find(el => el.id === oldData.tableData.id);\n                const index = dataDelete.indexOf(target);\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n                resolve();\n            }, 500);\n          })\n      }}\n    />\n  );\n}\n")))}m.isMDXComponent=!0},154:function(e,a,t){"use strict";t.d(a,"a",(function(){return i}));var n=t(0),d=t.n(n),o=(t(22),function(e){var a=e.type,t=e.children,n=a;return"tip"===a&&(n="success"),"note"===a&&(n="secondary"),d.a.createElement("div",{className:"admonition admonition-"+a+" alert alert--"+n},d.a.createElement("div",{className:"admonition-heading"},d.a.createElement("h5",null,d.a.createElement("span",{className:"admonition-icon"},d.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},d.a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),a.toLowerCase())),d.a.createElement("div",{className:"admonition-content"},d.a.createElement("p",null,t)))}),i=function(){return d.a.createElement(o,{type:"note"},"See ",d.a.createElement("a",{href:"/demos/#demo-environment"},d.a.createElement("b",null,d.a.createElement("i",null,"here")))," for more on the ",d.a.createElement("code",null,"GLOBAL_VARS")," we use in our demos")}}}]);