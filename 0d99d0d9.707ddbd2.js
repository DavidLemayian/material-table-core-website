(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{63:function(e,r,o){"use strict";o.r(r),o.d(r,"frontMatter",(function(){return i})),o.d(r,"metadata",(function(){return s})),o.d(r,"toc",(function(){return d})),o.d(r,"default",(function(){return p}));var n=o(3),a=o(7),t=(o(0),o(139)),i=(o(243),{id:"demos",title:"Introduction",hide_title:!0,slug:"/"}),s={unversionedId:"demos",id:"demos",isDocsHomePage:!1,title:"Introduction",description:"Demos",source:"@site/demos/index.mdx",slug:"/",permalink:"/demos/",version:"current",sidebar:"sidebar",next:{title:"Basic Action",permalink:"/demos/actions/basic"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"Demo Environment",id:"demo-environment",children:[]},{value:"Environmental Variables",id:"environmental-variables",children:[{value:"<code>DEMO_DATA</code>",id:"demo_data",children:[]},{value:"<code>DEMO_COLS</code>",id:"demo_cols",children:[]},{value:"<code>TABLE_ICONS</code>",id:"table_icons",children:[]}]}],l={toc:d};function p(e){var r=e.components,o=Object(a.a)(e,["components"]);return Object(t.b)("wrapper",Object(n.a)({},l,o,{components:r,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"demos"},"Demos"),Object(t.b)("h2",{id:"introduction"},"Introduction"),Object(t.b)("p",null,"More info on demos. Each demo should have a live code block for you to tinker with."),Object(t.b)("h2",{id:"demo-environment"},"Demo Environment"),Object(t.b)("pre",null,Object(t.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),'/**\n * To keep our demos succinct we take advantage of "global variables".\n * Global variables will be in all caps snake case.\n */\n<MaterialTable\n  // highlight-start\n  data={DEMO_DATA} \n  columns={DEMO_COLS} \n  icons={TABLE_ICONS}\n  // highlight-end\n  // ...\n/>\n')),Object(t.b)("h2",{id:"environmental-variables"},"Environmental Variables"),Object(t.b)("p",null,"The values for our global environmental variables can be found below."),Object(t.b)("h3",{id:"demo_data"},Object(t.b)("inlineCode",{parentName:"h3"},"DEMO_DATA")),Object(t.b)("pre",null,Object(t.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// This data is passed into `<MaterialTable data={...} />`\nconst DEMO_DATA = [\n  { id: 2, name: "Joe" },\n  { id: 1, name: "Mary" }\n];\n')),Object(t.b)("h3",{id:"demo_cols"},Object(t.b)("inlineCode",{parentName:"h3"},"DEMO_COLS")),Object(t.b)("pre",null,Object(t.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// This data is passed into `<MaterialTable columns={...} />`\nconst DEMO_COLS = [\n  { field: "id", title: "Id" },\n  { field: "name", title: "Name" }\n];\n')),Object(t.b)("h3",{id:"table_icons"},Object(t.b)("inlineCode",{parentName:"h3"},"TABLE_ICONS")),Object(t.b)("pre",null,Object(t.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="/src/theme/ReactLiveScope/tableIcons.js"',title:'"/src/theme/ReactLiveScope/tableIcons.js"'}),'// After importing this file we pass it (the default export) \n// into `<MaterialTable icons={...} />`\nimport React, { forwardRef } from "react";\nimport { \n  AddBox, ArrowUpward, Check, ChevronLeft, ChevronRight, Clear, DeleteOutline, \n  Edit, FilterList, FirstPage, LastPage, Remove, SaveAlt, Search, ViewColumn \n} from "@material-ui/icons";\n\n// This is the object we import\nexport default {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n')))}p.isMDXComponent=!0}}]);